/**
 * WARNING: This file is automatically generated from:
 *  'src/scripting/api.h'
 * DO NOT CHANGE
 */

#include "scripting/wrapper.h"

#include <assert.h>
#include <limits>
#include <sstream>
#include <squirrel.h>

#include "scripting/api.h"

#include "squirrel/squirrel_error.hpp"

namespace UfoAPI {
namespace wrapper {

static SQInteger TestFunction_wrapper(HSQUIRRELVM vm)
{
  (void) vm;

  try {
    UfoAPI::TestFunction();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'TestFunction'"));
    return SQ_ERROR;
  }

}

static SQInteger LoadDecal_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    UfoAPI::LoadDecal(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'LoadDecal'"));
    return SQ_ERROR;
  }

}

static SQInteger DrawDecal_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  const SQChar* arg2;
  if(SQ_FAILED(sq_getstring(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a string"));
    return SQ_ERROR;
  }

  try {
    UfoAPI::DrawDecal(static_cast<int> (arg0), static_cast<int> (arg1), arg2);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'DrawDecal'"));
    return SQ_ERROR;
  }

}

static SQInteger GetMousePos_wrapper(HSQUIRRELVM vm)
{
  (void) vm;

  try {
    UfoAPI::GetMousePos();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'GetMousePos'"));
    return SQ_ERROR;
  }

}

static SQInteger GetMouseWheel_wrapper(HSQUIRRELVM vm)
{
  (void) vm;

  try {
    UfoAPI::GetMouseWheel();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'GetMouseWheel'"));
    return SQ_ERROR;
  }

}

static SQInteger NewDummyTestGame_wrapper(HSQUIRRELVM vm)
{
  (void) vm;

  try {
    UfoAPI::NewDummyTestGame();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'NewDummyTestGame'"));
    return SQ_ERROR;
  }

}

static SQInteger UpdateDummyTestGame_wrapper(HSQUIRRELVM vm)
{
  (void) vm;

  try {
    UfoAPI::UpdateDummyTestGame();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'UpdateDummyTestGame'"));
    return SQ_ERROR;
  }

}

} // namespace wrapper
void register_ufo_wrapper(HSQUIRRELVM v)
{
  using namespace wrapper;

  sq_pushstring(v, "TestFunction", -1);
  sq_newclosure(v, &TestFunction_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'TestFunction'");
  }

  sq_pushstring(v, "LoadDecal", -1);
  sq_newclosure(v, &LoadDecal_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'LoadDecal'");
  }

  sq_pushstring(v, "DrawDecal", -1);
  sq_newclosure(v, &DrawDecal_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|ns");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'DrawDecal'");
  }

  sq_pushstring(v, "GetMousePos", -1);
  sq_newclosure(v, &GetMousePos_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'GetMousePos'");
  }

  sq_pushstring(v, "GetMouseWheel", -1);
  sq_newclosure(v, &GetMouseWheel_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'GetMouseWheel'");
  }

  sq_pushstring(v, "NewDummyTestGame", -1);
  sq_newclosure(v, &NewDummyTestGame_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'NewDummyTestGame'");
  }

  sq_pushstring(v, "UpdateDummyTestGame", -1);
  sq_newclosure(v, &UpdateDummyTestGame_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'UpdateDummyTestGame'");
  }

}

} // namespace UfoAPI

/* EOF */
